==83468== Memcheck, a memory error detector
==83468== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==83468== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==83468== Command: ./minishell
==83468== Parent PID: 83467
==83468== 
==83469== Invalid read of size 8
==83469==    at 0x4080D9: child_redir_out (child.c:103)
==83469==    by 0x407D9B: child (child.c:34)
==83469==    by 0x407AAF: execute_cmd_entered (executor.c:76)
==83469==    by 0x40795C: execute_cmd (executor.c:53)
==83469==    by 0x407849: execute_stack (executor.c:36)
==83469==    by 0x4077B5: execute (executor.c:20)
==83469==    by 0x4039D1: process_input (input.c:61)
==83469==    by 0x403A3C: read_input (input.c:133)
==83469==    by 0x404608: main (main.c:28)
==83469==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==83469== 
==83469== 
==83469== Process terminating with default action of signal 11 (SIGSEGV)
==83469==  Access not within mapped region at address 0x0
==83469==    at 0x4080D9: child_redir_out (child.c:103)
==83469==    by 0x407D9B: child (child.c:34)
==83469==    by 0x407AAF: execute_cmd_entered (executor.c:76)
==83469==    by 0x40795C: execute_cmd (executor.c:53)
==83469==    by 0x407849: execute_stack (executor.c:36)
==83469==    by 0x4077B5: execute (executor.c:20)
==83469==    by 0x4039D1: process_input (input.c:61)
==83469==    by 0x403A3C: read_input (input.c:133)
==83469==    by 0x404608: main (main.c:28)
==83469==  If you believe this happened as a result of a stack
==83469==  overflow in your program's main thread (unlikely but
==83469==  possible), you can try to increase the size of the
==83469==  main thread stack using the --main-stacksize= flag.
==83469==  The main thread stack size used in this run was 8388608.
==83469== 
==83469== HEAP SUMMARY:
==83469==     in use at exit: 13,887 bytes in 246 blocks
==83469==   total heap usage: 305 allocs, 59 frees, 14,859 bytes allocated
==83469== 
==83469== LEAK SUMMARY:
==83469==    definitely lost: 0 bytes in 0 blocks
==83469==    indirectly lost: 0 bytes in 0 blocks
==83469==      possibly lost: 0 bytes in 0 blocks
==83469==    still reachable: 13,887 bytes in 246 blocks
==83469==         suppressed: 0 bytes in 0 blocks
==83469== Reachable blocks (those to which a pointer was found) are not shown.
==83469== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==83469== 
==83469== For lists of detected and suppressed errors, rerun with: -s
==83469== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==83468== Conditional jump or move depends on uninitialised value(s)
==83468==    at 0x408D08: execute_and_launch_left (executor_and.c:38)
==83468==    by 0x408C11: execute_and (executor_and.c:20)
==83468==    by 0x407872: execute_stack (executor.c:38)
==83468==    by 0x4077B5: execute (executor.c:20)
==83468==    by 0x4039D1: process_input (input.c:61)
==83468==    by 0x403A3C: read_input (input.c:133)
==83468==    by 0x404608: main (main.c:28)
==83468== 
==83468== Conditional jump or move depends on uninitialised value(s)
==83468==    at 0x406C3D: setup_next_to_top (stack.c:59)
==83468==    by 0x407B4E: execute_cmd_done (executor.c:88)
==83468==    by 0x407981: execute_cmd (executor.c:55)
==83468==    by 0x407849: execute_stack (executor.c:36)
==83468==    by 0x4077B5: execute (executor.c:20)
==83468==    by 0x4039D1: process_input (input.c:61)
==83468==    by 0x403A3C: read_input (input.c:133)
==83468==    by 0x404608: main (main.c:28)
==83468== 
==83468== 
==83468== HEAP SUMMARY:
==83468==     in use at exit: 4,016 bytes in 1 blocks
==83468==   total heap usage: 198 allocs, 197 frees, 10,299 bytes allocated
==83468== 
==83468== LEAK SUMMARY:
==83468==    definitely lost: 0 bytes in 0 blocks
==83468==    indirectly lost: 0 bytes in 0 blocks
==83468==      possibly lost: 0 bytes in 0 blocks
==83468==    still reachable: 4,016 bytes in 1 blocks
==83468==         suppressed: 0 bytes in 0 blocks
==83468== Reachable blocks (those to which a pointer was found) are not shown.
==83468== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==83468== 
==83468== Use --track-origins=yes to see where uninitialised values come from
==83468== For lists of detected and suppressed errors, rerun with: -s
==83468== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
